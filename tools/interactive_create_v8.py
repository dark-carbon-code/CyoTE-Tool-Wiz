from config import *

import sqlite3
import json
from InquirerPy import inquirer
from utils.file_utils import save_tool_json
from utils.csf_use_case_selector import select_csf_use_cases
from utils.tool_role_selector import select_tool_roles
from utils.nice_to_csf_usecase import get_use_cases_for_nice_roles
from utils.deployment_context import select_trl_level, select_hosting_env, multi_select_context
from rich import print

DB_PATH = DB_PATH

def query_db(query, params=()):
    with sqlite3.connect(DB_PATH) as conn:
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        cur.execute(query, params)
        return [dict(row) for row in cur.fetchall()]

def create_tool():
    print("[bold green]\n--- CYOTE TOOL WIZ: Create New Tool Entry ---[/bold green]")

    tool_name = inquirer.text(message="üõ† Tool name:").execute()
    description = inquirer.text(message="üìò Describe what this tool does and how it's used:").execute()

    selected_roles = select_tool_roles()

    print(f"\n[bold yellow]üìã Preview of selected user roles with NICE alignment:[/bold yellow]")
    for role in selected_roles:
        print(f"\n[green]{role['name']}[/green]: {role['description']}")
        if role.get("nice_roles"):
            print("  [cyan]Aligned NICE Roles:[/cyan]")
            for nr in role["nice_roles"]:
                print(f"    ‚Ä¢ [bold]{nr['title']}[/bold] ({nr['id']})")
        else:
            print("  [red]‚ö† No NICE roles mapped[/red]")

    all_nice_ids = [nr['id'] for role in selected_roles for nr in role.get("nice_roles", [])]
    autogenerated_use_cases = get_use_cases_for_nice_roles(all_nice_ids)

    if autogenerated_use_cases:
        print(f"\n[bold magenta]üî¨ Auto-generated {len(autogenerated_use_cases)} CSF use cases based on NICE roles:[/bold magenta]")
        for uc in autogenerated_use_cases:
            print(f" - [cyan]{uc['csf_function_id']}[/cyan] [bold]{uc['name']}[/bold]")

    matrix_choice = inquirer.select(
        message="üßΩ Choose MITRE matrix:",
        choices=["ICS", "Enterprise"]
    ).execute()

    selected_tactic_ids = []
    selected_techniques = []
    based_on_pars = inquirer.confirm(
        message="üìä Is this tool based on the CyOTE Precursor Analysis Reports (PARs)?",
        default=False
    ).execute()

    if based_on_pars:
        print("[yellow]‚öô Auto-loading all techniques and tactics from CyOTE PAR dataset...[/yellow]")
        par_techs = query_db("SELECT DISTINCT tech_id FROM case_technique_examples")
        par_tech_ids = tuple(t["tech_id"] for t in par_techs)

        if par_tech_ids:
            placeholder = ",".join(["?"] * len(par_tech_ids))
            selected_techniques = query_db(f"""
                SELECT id, name, description FROM techniques WHERE id IN ({placeholder})
            """, par_tech_ids)

            tactic_rows = query_db(f"""
                SELECT DISTINCT tt.tactic_id, t.name
                FROM technique_tactics tt
                JOIN tactics t ON tt.tactic_id = t.id
                WHERE tt.technique_id IN ({placeholder})
            """, par_tech_ids)
            selected_tactic_ids = [f"{row['tactic_id']} - {row['name']}" for row in tactic_rows]

            print(f"[green]‚úÖ Loaded {len(selected_techniques)} techniques and {len(tactic_rows)} tactics from PAR dataset.[/green]")

    else:
        tactics = query_db("""
            SELECT t.id, t.name FROM tactics t 
            JOIN matrices m ON t.matrix_id = m.id WHERE m.name = ?
        """, (matrix_choice,))
        selected_tactic_ids = inquirer.checkbox(
            message="üéØ Select supported tactics:",
            choices=[f"{t['id']} - {t['name']}" for t in tactics]
        ).execute()

        known_input = inquirer.text(
            message="üîç Known Technique IDs or Names (comma-separated):", default=""
        ).execute()

        all_techs = query_db("""
            SELECT t.id, t.name, t.description FROM techniques t 
            JOIN matrices m ON t.matrix_id = m.id WHERE m.name = ?
        """, (matrix_choice,))

        if known_input:
            known_vals = [k.strip().lower() for k in known_input.split(",")]
            for val in known_vals:
                for t in all_techs:
                    if val in t["id"].lower() or val in t["name"].lower():
                        selected_techniques.append(t)

        if inquirer.confirm(message="‚ûï Select techniques manually by tactic?", default=True).execute():
            for tactic in selected_tactic_ids:
                tactic_id = tactic.split(" - ")[0]
                techs = query_db("""
                    SELECT t.id, t.name, t.description
                    FROM techniques t
                    JOIN technique_tactics tt ON tt.technique_id = t.id
                    WHERE tt.tactic_id = ?
                """, (tactic_id,))
                if techs:
                    manual_selection = inquirer.checkbox(
                        message=f"üìå Techniques under [bold]{tactic}[/bold]:",
                        choices=[f"{t['id']} - {t['name']}" for t in techs]
                    ).execute()
                    for choice in manual_selection:
                        tid = choice.split(" - ")[0]
                        match = next((t for t in techs if t["id"] == tid), None)
                        if match and match not in selected_techniques:
                            selected_techniques.append(match)
                            print(f"[cyan]{match['id']}[/cyan]: {match['description']}\n")

    tech_ids = tuple(t["id"] for t in selected_techniques)
    targeted_assets, related_cases, data_source_details, observable_details = [], [], [], []

    if tech_ids:
        placeholder = ",".join(["?"] * len(tech_ids))

        targeted_assets = query_db(f"""
            SELECT DISTINCT a.id, a.name, a.description
            FROM assets a
            JOIN technique_assets ta ON ta.asset_id = a.id
            WHERE ta.technique_id IN ({placeholder})
        """, tech_ids)

        cases = query_db(f"""
            SELECT case_id, case_name, tech_id, tech_name, case_description
            FROM case_technique_examples
            WHERE tech_id IN ({placeholder})
            ORDER BY case_id, tech_id
        """, tech_ids)

        case_map = {}
        for case in cases:
            if not case["case_description"] or not case["case_description"].strip():
                continue
            cid = case["case_id"]
            tid = case["tech_id"]
            if cid not in case_map:
                case_map[cid] = {
                    "case_id": cid,
                    "case_name": case["case_name"] or "Unknown Case",
                    "descriptions": []
                }
            if not any(d["tech_id"] == tid for d in case_map[cid]["descriptions"]):
                case_map[cid]["descriptions"].append({
                    "tech_id": tid,
                    "tech_name": case["tech_name"],
                    "case_description": case["case_description"]
                })
        related_cases = list(case_map.values())

        raw_ds = query_db(f"""
            SELECT DISTINCT ds.id, ds.name, ds.description
            FROM data_sources ds
            JOIN technique_data_sources tds ON ds.id = tds.data_source_id
            WHERE tds.technique_id IN ({placeholder})
        """, tech_ids)

        if raw_ds:
            ds_ids = [ds["id"] for ds in raw_ds]
            placeholder_ds = ",".join(["?"] * len(ds_ids))

            all_components = query_db(f"""
                SELECT dc.data_source_id, dc.id, dc.name, dc.description, dc.stix_id, dc.collection_layers, dc.url
                FROM data_components dc
                WHERE dc.data_source_id IN ({placeholder_ds})
            """, ds_ids)

            for ds in raw_ds:
                ds_comps = [c for c in all_components if c["data_source_id"] == ds["id"]]
                data_source_details.append({
                    "id": ds["id"],
                    "name": ds["name"],
                    "description": ds["description"],
                    "components": [
                        {"name": c["name"], "description": c["description"]}
                        for c in ds_comps
                    ]
                })

            observable_details = query_db(f"""
                SELECT DISTINCT ot.name, ot.category, ot.description
                FROM observable_types ot
                JOIN data_source_observable_types dsot ON ot.id = dsot.observable_type_id
                WHERE dsot.data_source_id IN ({placeholder_ds})
            """, ds_ids)

    manual_use_case_selection = select_csf_use_cases()
    all_use_cases = manual_use_case_selection or autogenerated_use_cases

    # Updated deployment context workflow
    trl_info = select_trl_level()
    host_env_info = select_hosting_env()
    interface_info = multi_select_context("Interface Types", "interface_types")
    access_info = multi_select_context("Access Methods", "access_methods")
    input_info = multi_select_context("Input Types", "input_types")
    output_info = multi_select_context("Output Types", "output_types")
    import_info = multi_select_context("Import Formats", "import_formats")
    export_info = multi_select_context("Export Formats", "export_formats")

    example_usage = inquirer.text(message="üìå Paste example usage from doc or README:").execute()
    github_link = inquirer.text(message="üîó GitHub URL (if available):").execute()
    fact_sheet = inquirer.text(message="üìÑ Fact Sheet or PDF URL (if available):").execute()

    tool_entry = {
        "tool_name": tool_name,
        "description": description,
        "user_roles": selected_roles,
        "tactics_supported": selected_tactic_ids,
        "techniques_supported": [dict(t) for t in selected_techniques],
        "data_sources": data_source_details,
        "observable_types": observable_details,
        "use_cases": all_use_cases,
        "deployment_context": {
            "trl": trl_info,
            "hosting_env": host_env_info,
            "interfaces": interface_info,
            "access_methods": access_info,
            "input_types": input_info,
            "output_types": output_info,
            "import_formats": import_info,
            "export_formats": export_info
        },
        "targeted_assets": [dict(a) for a in targeted_assets],
        "related_cases": json.loads(json.dumps(related_cases)),
        "example_usage": example_usage,
        "github": github_link or None,
        "factsheet": fact_sheet or None
    }

    save_tool_json(tool_entry)
    print(f"\n[bold blue]‚úî Tool entry for '{tool_name}' saved successfully to JSON![/bold blue]")

if __name__ == "__main__":
    create_tool()
