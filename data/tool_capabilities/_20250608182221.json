{
  "tool_name": "",
  "description": "",
  "user_roles": [],
  "tactics_supported": [
    "TA0100 - Collection"
  ],
  "techniques_supported": [
    {
      "id": "T0830",
      "name": "Adversary-in-the-Middle",
      "description": "Adversaries with privileged network access may seek to modify network traffic in real time using adversary-in-the-middle (AiTM) attacks. (Citation: Gabriel Sanchez October 2017) This type of attack allows the adversary to intercept traffic to and/or from a particular device on the network. If a AiTM attack is established, then the adversary has the ability to block, log, modify, or inject traffic into the communication stream. There are several ways to accomplish this attack, but some of the most-common are Address Resolution Protocol (ARP) poisoning and the use of a proxy. (Citation: Bonnie Zhu, Anthony Joseph, Shankar Sastry 2011)  \n\nAn AiTM attack may allow an adversary to perform the following attacks:  \n[Block Reporting Message](https://attack.mitre.org/techniques/T0804), [Spoof Reporting Message](https://attack.mitre.org/techniques/T0856), [Modify Parameter](https://attack.mitre.org/techniques/T0836), [Unauthorized Command Message](https://attack.mitre.org/techniques/T0855)"
    },
    {
      "id": "T0802",
      "name": "Automated Collection",
      "description": "Adversaries may automate collection of industrial environment information using tools or scripts. This automated collection may leverage native control protocols and tools available in the control systems environment. For example, the OPC protocol may be used to enumerate and gather information. Access to a system or interface with these native protocols may allow collection and enumeration of other attached, communicating servers and devices."
    },
    {
      "id": "T0811",
      "name": "Data from Information Repositories",
      "description": "Adversaries may target and collect data from information repositories. This can include sensitive data such as specifications, schematics, or diagrams of control system layouts, devices, and processes. Examples of information repositories include reference databases in the process environment, as well as databases in the corporate network that might contain information about the ICS.(Citation: Cybersecurity & Infrastructure Security Agency March 2018)\n\nInformation collected from these systems may provide the adversary with a better understanding of the operational environment, vendors used, processes, or procedures of the ICS.\n\nIn a campaign between 2011 and 2013 against ONG organizations, Chinese state-sponsored actors searched document repositories for specific information such as, system manuals, remote terminal unit (RTU) sites, personnel lists, documents that included the string SCAD*, user credentials, and remote dial-up access information. (Citation: CISA AA21-201A Pipeline Intrusion July 2021)"
    },
    {
      "id": "T0893",
      "name": "Data from Local System",
      "description": "Adversaries may target and collect data from local system sources, such as file systems, configuration files, or local databases. This can include sensitive data such as specifications, schematics, or diagrams of control system layouts, devices, and processes.\n\nAdversaries may do this using [Command-Line Interface](https://attack.mitre.org/techniques/T0807) or [Scripting](https://attack.mitre.org/techniques/T0853) techniques to interact with the file system to gather information. Adversaries may also use [Automated Collection](https://attack.mitre.org/techniques/T0802) on the local system. "
    }
  ],
  "data_sources": [
    {
      "id": "DS0009",
      "name": "Process",
      "description": "Instances of computer programs that are being executed by at least one thread. Processes have memory space for process executables, loaded modules (DLLs or shared libraries), and allocated memory regions containing everything from user input to application-specific data structures(Citation: Microsoft Processes and Threads)",
      "components": [
        {
          "name": "Process: OS API Execution",
          "description": "Calls made by a process to operating system-provided Application Programming Interfaces (APIs). These calls are essential for interacting with system resources such as memory, files, and hardware, or for performing system-level tasks. Monitoring these calls can provide insight into a process's intent, especially if the process is malicious.\n\n*Data Collection Measures:*\n\n- Endpoint Detection and Response (EDR) Tools:\n    - Leverage tools to monitor API execution behaviors at the process level.\n    - Example: Sysmon Event ID 10 captures API call traces for process access and memory allocation.\n- Process Monitor (ProcMon):\n    - Use ProcMon to collect detailed logs of process and API activity. ProcMon can provide granular details on API usage and identify malicious behavior during analysis.\n- Windows Event Logs:\n    - Use Event IDs from Windows logs for specific API-related activities:\n        - Event ID 4688: A new process has been created (can indirectly infer API use).\n        - Event ID 4657: A registry value has been modified (to monitor registry-altering APIs).\n- Dynamic Analysis Tools:\n    - Tools like Cuckoo Sandbox, Flare VM, or Hybrid Analysis monitor API execution during malware detonation.\n- Host-Based Logs:\n    - On Linux/macOS systems, leverage audit frameworks (e.g., `auditd`, `strace`) to capture and analyze system call usage that APIs map to.\n- Runtime Monitors:\n    - Runtime security tools like Falco can monitor system-level calls for API execution.\n- Debugging and Tracing:\n    - Use debugging tools like gdb (Linux) or WinDbg (Windows) for deep tracing of API executions in real time."
        },
        {
          "name": "Process: Process Creation",
          "description": "Refers to the event in which a new process (executable) is initialized by an operating system. This can involve parent-child process relationships, process arguments, and environmental variables. Monitoring process creation is crucial for detecting malicious behaviors, such as execution of unauthorized binaries, scripting abuse, or privilege escalation attempts.\n\n*Data Collection Measures:*\n\n- Endpoint Detection and Response (EDR) Tools:\n    - EDRs provide process telemetry, tracking execution flows and arguments.\n- Windows Event Logs:\n    - Event ID 4688 (Audit Process Creation): Captures process creation with associated parent process.\n- Sysmon (Windows):\n    - Event ID 1 (Process Creation): Provides detailed logging\n- Linux/macOS Monitoring:\n    - AuditD (execve syscall): Logs process creation.\n    - eBPF/XDP: Used for low-level monitoring of system calls related to process execution.\n    - OSQuery: Allows SQL-like queries to track process events (process_events table).\n    - Apple Endpoint Security Framework (ESF): Monitors process creation on macOS.\n- Network-Based Monitoring:\n    - Zeek (Bro) Logs: Captures network-based process execution related to remote shells.\n    - Syslog/OSSEC: Tracks execution of processes on distributed systems.\n- Behavioral SIEM Rules:\n    - Monitor process creation for uncommon binaries in user directories.\n    - Detect processes with suspicious command-line arguments. "
        },
        {
          "name": "Process: Process Metadata",
          "description": "Contextual data about a running process, which may include information such as environment variables, image name, user/owner, etc."
        },
        {
          "name": "Process: Process Termination",
          "description": "The exit or termination of a running process on a system. This can occur due to normal operations, user-initiated commands, or malicious actions such as process termination by malware to disable security controls.\n\n*Data Collection Measures:*\n\n- Endpoint Detection and Response (EDR) Tools:\n    - Monitor process termination events.\n- Windows Event Logs:\n    - Event ID 4689 (Process Termination) \u0096 Captures when a process exits, including process ID and parent process.\n    - Event ID 7036 (Service Control Manager) \u0096 Monitors system service stops.\n- Sysmon (Windows):\n    - Event ID 5 (Process Termination) \u0096 Detects when a process exits, including parent-child relationships.\n- Linux/macOS Monitoring:\n    - AuditD (`execve`, `exit_group`, `kill` syscalls) \u0096 Captures process termination via command-line interactions.\n    - eBPF/XDP: Monitors low-level system calls related to process termination.\n    - OSQuery: The processes table can be queried for abnormal exits."
        }
      ]
    },
    {
      "id": "DS0012",
      "name": "Script",
      "description": "A file or stream containing a list of commands, allowing them to be launched in sequence(Citation: Microsoft PowerShell Logging)(Citation: FireEye PowerShell Logging)(Citation: Microsoft AMSI)",
      "components": [
        {
          "name": "Script: Script Execution",
          "description": "The execution of a text file that contains code via the interpreter.\n\n*Data Collection Measures:*\n\n- Windows Event Logs:\n    - Event ID 4104 (PowerShell Script Block Logging) \u0096 Captures full command-line execution of PowerShell scripts.\n    - Event ID 4688 (Process Creation) \u0096 Detects script execution by tracking process launches (`powershell.exe`, `wscript.exe`, `cscript.exe`).\n    - Event ID 5861 (Script Execution) \u0096 Captures script execution via Windows Defender AMSI logging.\n- Sysmon (Windows):\n    - Event ID 1 (Process Creation) \u0096 Monitors script execution initiated by scripting engines.\n    - Event ID 11 (File Creation) \u0096 Detects new script files written to disk before execution.\n- Endpoint Detection and Response (EDR) Tools:\n    - Track script execution behavior, detect obfuscated commands, and prevent malicious scripts.\n- PowerShell Logging:\n    - Enable Module Logging: Logs all loaded modules and cmdlets.\n    - Enable Script Block Logging: Captures complete PowerShell script execution history.\n- SIEM Detection Rules:\n    - Detect script execution with obfuscated, encoded, or remote URLs.\n    - Alert on script executions using `-EncodedCommand` or `iex(iwr)`."
        }
      ]
    },
    {
      "id": "DS0015",
      "name": "Application Log",
      "description": "Events collected by third-party services such as mail servers, web applications, or other appliances (not by the native OS or platform)(Citation: Confluence Logs)",
      "components": [
        {
          "name": "Application Log: Application Log Content",
          "description": "Application Log Content refers to logs generated by applications or services, providing a record of their activity. These logs may include metrics, errors, performance data, and operational alerts from web, mail, or other applications. These logs are vital for monitoring application behavior and detecting malicious activities or anomalies. Examples: \n\n- Web Application Logs: These logs include information about requests, responses, errors, and security events (e.g., unauthorized access attempts).\n- Email Application Logs: Logs contain metadata about emails sent, received, or blocked (e.g., sender/receiver addresses, message IDs).\n- SaaS Application Logs: Activity logs include user logins, configuration changes, and access to sensitive resources.\n- Cloud Application Logs: Logs detail control plane activities, including API calls, instance modifications, and network changes.\n- System/Application Monitoring Logs: Logs provide insights into application performance, errors, and anomalies.\n\nThis data component can be collected through the following measures:\n\nConfigure Application Logging\n\n- Enable logging within the application or service.\n- Examples:\n    - Web Servers: Enable access and error logs in NGINX or Apache.\n    - Email Systems: Enable audit logging in Microsoft Exchange or Gmail.\n\nCentralized Log Management\n\n- Use log management solutions like Splunk, or a cloud-native logging solution.\n- Configure the application to send logs to a centralized system for analysis.\n\nCloud-Specific Collection\n\n- Use services like AWS CloudWatch, Azure Monitor, or Google Cloud Operations Suite for cloud-based applications.\n- Ensure logging is enabled for all critical resources (e.g., API calls, IAM changes).\n\nSIEM Integration\n\n- Integrate application logs with a SIEM platform (e.g., Splunk, QRadar) for real-time correlation and analysis.\n- Use parsers to standardize log formats and extract key fields like timestamps, user IDs, and error codes."
        }
      ]
    },
    {
      "id": "DS0017",
      "name": "Command",
      "description": "A directive given to a computer program, acting as an interpreter of some kind, in order to perform a specific task(Citation: Confluence Linux Command  Line)(Citation: Audit OSX)",
      "components": [
        {
          "name": "Command: Command Execution",
          "description": "Command Execution involves monitoring and capturing the execution of textual commands (including shell commands, cmdlets, and scripts) within an operating system or application. These commands may include arguments or parameters and are typically executed through interpreters such as `cmd.exe`, `bash`, `zsh`, `PowerShell`, or programmatic execution. Examples: \n\n- Windows Command Prompt\n    - dir \u0096 Lists directory contents.\n    - net user \u0096 Queries or manipulates user accounts.\n    - tasklist \u0096 Lists running processes.\n- PowerShell\n    - Get-Process \u0096 Retrieves processes running on a system.\n    - Set-ExecutionPolicy \u0096 Changes PowerShell script execution policies.\n    - Invoke-WebRequest \u0096 Downloads remote resources.\n- Linux Shell\n    - ls \u0096 Lists files in a directory.\n    - cat /etc/passwd \u0096 Reads the user accounts file.\n    - curl http://malicious-site.com \u0096 Retrieves content from a malicious URL.\n- Container Environments\n    - docker exec \u0096 Executes a command inside a running container.\n    - kubectl exec \u0096 Runs commands in Kubernetes pods.\n- macOS Terminal\n    - open \u0096 Opens files or URLs.\n    - dscl . -list /Users \u0096 Lists all users on the system.\n    - osascript -e \u0096 Executes AppleScript commands.\n\nThis data component can be collected through the following measures:\n\nEnable Command Logging\n\n- Windows:\n    - Enable PowerShell logging: `Set-ExecutionPolicy Bypass`, `Set-ItemProperty -Path \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\PowerShell\\ScriptBlockLogging\" -Name EnableScriptBlockLogging -Value 1`\n    - Enable Windows Event Logging:\n        - Event ID 4688: Tracks process creation, including command-line arguments.\n        - Event ID 4104: Logs PowerShell script block execution.\n- Linux/macOS:\n    - Enable shell history logging in `.bashrc` or `.zshrc`: `export HISTTIMEFORMAT=\"%d/%m/%y %T \"`, `export PROMPT_COMMAND='history -a; history -w'`\n    - Use audit frameworks (e.g., `auditd`) to log command executions. Example rule to log all `execve` syscalls: `-a always,exit -F arch=b64 -S execve -k cmd_exec`\n- Containers:\n    - Use runtime-specific tools like Docker\u0092s --log-driver or Kubernetes Audit Logs to capture exec commands.\n\nIntegrate with Centralized Logging\n\n- Collect logs using a SIEM (e.g., Splunk) or cloud-based log aggregation tools like AWS CloudWatch or Azure Monitor. Example Splunk Search for Windows Event 4688:\n`index=windows EventID=4688 CommandLine=*`\n\nUse Endpoint Detection and Response (EDR) Tools\n\n- Monitor command executions via EDR solutions \n\nDeploy Sysmon for Advanced Logging (Windows)\n\n- Use Sysmon's Event ID 1 to log process creation with command-line arguments"
        }
      ]
    },
    {
      "id": "DS0019",
      "name": "Service",
      "description": "A computer process that is configured to execute continuously in the background and perform system tasks, in some cases before any user has logged in(Citation: Microsoft Services)(Citation: Linux Services Run Levels)",
      "components": [
        {
          "name": "Service: Service Creation",
          "description": "The registration of a new service or daemon on an operating system.\n\n*Data Collection Measures:*\n\n- Windows Event Logs\n    - Event ID 4697 - Captures the creation of a new Windows service.\n    - Event ID 7045 - Captures services installed by administrators or adversaries.\n    - Event ID 7034 - Could indicate malicious service modification or exploitation.\n- Sysmon Logs\n    - Sysmon Event ID 1 - Process Creation (captures service executables).\n    - Sysmon Event ID 4 - Service state changes (detects service installation).\n    - Sysmon Event ID 13 - Registry modifications (captures service persistence changes).\n- PowerShell Logging\n    - Monitor `New-Service` and `Set-Service` PowerShell cmdlets in Event ID 4104 (Script Block Logging).\n- Linux/macOS Collection Methods\n    - AuditD & Syslog Daemon Logs (`/var/log/syslog`, `/var/log/messages`, `/var/log/daemon.log`)\n    - AuditD Rules:\n        - `auditctl -w /etc/systemd/system -p wa -k service_creation`\n        - Detects changes to `systemd` service configurations.\n- Systemd Journals (`journalctl -u <service_name>`)\n    - Captures newly created systemd services.\n- LaunchDaemons & LaunchAgents (macOS)\n    - Monitor `/Library/LaunchDaemons/` and `/Library/LaunchAgents/` for new plist files."
        },
        {
          "name": "Service: Service Metadata",
          "description": "Contextual data about a service/daemon, which may include information such as name, service executable, start type, etc."
        },
        {
          "name": "Service: Service Modification",
          "description": "Changes made to an existing service or daemon, such as modifying the service name, start type, execution parameters, or security configurations.\n\n*Data Collection Measures: *\n\n- Windows Event Logs\n    - Event ID 7040 - Detects modifications to the startup behavior of a service.\n    - Event ID 7045 - Can capture changes made to existing services.\n    - Event ID 7036 - Tracks when services start or stop, potentially indicating malicious tampering.\n    - Event ID 4697 - Can detect when an adversary reinstalls a service with different parameters.\n- Sysmon Logs\n    - Sysmon Event ID 13 - Detects changes to service configurations in the Windows Registry (e.g., `HKLM\\SYSTEM\\CurrentControlSet\\Services\\`).\n    - Sysmon Event ID 1 - Can track execution of `sc.exe` or `PowerShell Set-Service`.\n- PowerShell Logging\n    - Event ID 4104 (Script Block Logging) - Captures execution of commands like `Set-Service`, `New-Service`, or `sc config`.\n    - Command-Line Logging (Event ID 4688) - Tracks usage of service modification commands:\n        - `sc config <service_name> start= auto`  \n        - `sc qc <service_name>`  \n- Linux/macOS Collection Methods\n    - Systemd Journals (`journalctl -u <service_name>`) Tracks modifications to systemd service configurations.\n    - Daemon Logs (`/var/log/syslog`, `/var/log/messages`, `/var/log/daemon.log`) Captures changes to service state and execution parameters.\n    - AuditD Rules for Service Modification \n        - Monitor modifications to `/etc/systemd/system/` for new or altered service unit files: `auditctl -w /etc/systemd/system/ -p wa -k service_modification`\n        - Track execution of `systemctl` or `service` commands: `auditctl -a always,exit -F arch=b64 -S execve -F a0=systemctl -F key=service_mod`\n    - OSQuery for Linux/macOS Monitoring\n        - Query modified services using OSQuery\u0092s `processes` or `system_info` tables: `SELECT * FROM systemd_units WHERE state != 'running';`\n    - macOS Launch Daemon/Agent Modification\n        - Monitor for changes in:\n            - `/Library/LaunchDaemons/`\n            - `/Library/LaunchAgents/`\n        - Track modifications to `.plist` files indicating persistence attempts."
        }
      ]
    },
    {
      "id": "DS0022",
      "name": "File",
      "description": "A computer resource object, managed by the I/O system, for storing data (such as images, text, videos, computer programs, or any wide variety of other media).(Citation: Microsoft File Mgmt)",
      "components": [
        {
          "name": "File: File Access",
          "description": "To events where a file is opened or accessed, making its contents available to the requester. This includes reading, executing, or interacting with files by authorized or unauthorized entities. Examples include logging file access events (e.g., Windows Event ID 4663), monitoring file reads, and detecting unusual file access patterns. Examples: \n\n- File Read Operations: A user opens a sensitive document (e.g., financial_report.xlsx) on a shared drive.\n- File Execution: A script or executable file is accessed and executed (e.g., malware.exe is run from a temporary directory).\n- Unauthorized File Access: An unauthorized user attempts to access a protected configuration file (e.g., `/etc/passwd` on Linux or `System32` files on Windows).\n- File Access Patterns: Bulk access to multiple files in a short time (e.g., mass access to documents on a file server).\n- File Access via Network: Files on a network share are accessed remotely (e.g., logs of SMB file access).\n\nThis data component can be collected through the following measures:\n\nWindows\n\n- Windows Event Logs: Event ID 4663: Captures file system auditing details, including who accessed the file, access type, and file name.\n- Sysmon:\n    - Event ID 11: Logs file creation time changes.\n    - Event ID 1 (process creation): Can provide insight into files executed.\n- PowerShell: Commands to monitor file access in real-time: `Get-WinEvent -FilterHashtable @{LogName='Security'; ID=4663}`\n\nLinux\n\n- Auditd: Monitor file access events using audit rules: `auditctl -w /path/to/file -p rwxa -k file_access`\n- View logs: `ausearch -k file_access`\n- Inotify: Use inotify to track file access on Linux: `inotifywait -m /path/to/watch -e access`\n\nmacOS\n\n- Unified Logs: Monitor file access using the macOS Unified Logging System.\n- FSEvents: File System Events can track file accesses: `fs_usage | grep open`\n\nNetwork Devices\n\n- SMB/CIFS Logs: Monitor file access over network shares using logs from SMB or CIFS protocol.\n- NAS Logs: Collect logs from network-attached storage systems for file access events.\n\nSIEM Integration\n\n- Collect file access logs from all platforms (Windows, Linux, macOS) and centralize in a SIEM for correlation and analysis."
        },
        {
          "name": "File: File Creation",
          "description": "A new file is created on a system or network storage. This action often signifies an operation such as saving a document, writing data, or deploying a file. Logging these events helps identify legitimate or potentially malicious file creation activities. Examples include logging file creation events (e.g., Sysmon Event ID 11 or Linux auditd logs). \n\nThis data component can be collected through the following measures:\n\nWindows\n\n- Sysmon: Event ID 11: Logs file creation events, capturing details like the file path, hash, and creation time.\n- Windows Event Log: Enable \"Object Access\" auditing in Group Policy to track file creation under Event ID 4663.\n- PowerShell: Real-time monitoring of file creation:`Get-WinEvent -FilterHashtable @{LogName='Security'; ID=4663}`\n\nLinux\n\n- Auditd: Use audit rules to monitor file creation: `auditctl -w /path/to/directory -p w -k file_creation`\n- View logs: `ausearch -k file_creation`\n- Inotify: Monitor file creation with inotifywait: `inotifywait -m /path/to/watch -e create`\n\nmacOS\n\n- Unified Logs: Use the macOS Unified Logging System to capture file creation events.\n- FSEvents: Use File System Events to monitor file creation: `fs_usage | grep create`\n\nNetwork Devices\n\n- NAS Logs: Monitor file creation events on network-attached storage devices.\n- SMB Logs: Collect logs of file creation activities over SMB/CIFS protocols.\n\nSIEM Integration\n\n- Forward logs from all platforms (Windows, Linux, macOS) to a SIEM for central analysis and alerting."
        },
        {
          "name": "File: File Deletion",
          "description": "Refers to events where files are removed from a system or storage device. These events can indicate legitimate housekeeping activities or malicious actions such as attackers attempting to cover their tracks. Monitoring file deletions helps organizations identify unauthorized or suspicious activities.\n\nThis data component can be collected through the following measures:\n\nWindows\n\n- Sysmon: Event ID 23: Logs file deletion events, including details such as file paths and responsible processes.\n- Windows Event Log: Enable \"Object Access\" auditing to monitor file deletions.\n- PowerShell: `Get-WinEvent -FilterHashtable @{LogName='Security'; ID=4663} | Where-Object {$_.Message -like '*DELETE*'}`\n\nLinux\n\n- Auditd: Use audit rules to capture file deletion events: `auditctl -a always,exit -F arch=b64 -S unlink -S rename -S rmdir -k file_deletion`\n- Query logs: `ausearch -k file_deletion`\n- Inotify: Use inotifywait to monitor file deletions: `inotifywait -m /path/to/watch -e delete`\n\nmacOS\n\n- Endpoint Security Framework (ESF): Monitor events like ES_EVENT_TYPE_AUTH_UNLINK to capture file deletion activities.\n- FSEvents: Track file deletion activities in real-time: `fs_usage | grep unlink`\n\nSIEM Integration\n\n- Forward file deletion logs to a SIEM for centralized monitoring and correlation with other events.\n"
        },
        {
          "name": "File: File Metadata",
          "description": "contextual information about a file, including attributes such as the file's name, size, type, content (e.g., signatures, headers, media), user/owner, permissions, timestamps, and other related properties. File metadata provides insights into a file's characteristics and can be used to detect malicious activity, unauthorized modifications, or other anomalies. Examples: \n\n- File Ownership and Permissions: Checking the owner and permissions of a critical configuration file like /etc/passwd on Linux or C:\\Windows\\System32\\config\\SAM on Windows.\n- Timestamps: Analyzing the creation, modification, and access timestamps of a file.\n- File Content and Signatures: Extracting the headers of an executable file to verify its signature or detect packing/obfuscation.\n- File Attributes: Analyzing attributes like hidden, system, or read-only flags in Windows.\n- File Hashes: Generating MD5, SHA-1, or SHA-256 hashes of files to compare against threat intelligence feeds.\n- File Location: Monitoring files located in unusual directories or paths, such as temporary or user folders.\n\nThis data component can be collected through the following measures:\n\nWindows\n\n- Sysinternals Tools: Use `AccessEnum` or `PSFile` to retrieve metadata about file access and permissions.\n- Windows Event Logs: Enable object access auditing and monitor events like 4663 (Object Access) and 5140 (A network share object was accessed).\n- PowerShell: Use Get-Item or Get-ChildItem cmdlets: `Get-ChildItem -Path \"C:\\Path\\To\\Directory\" -Recurse | Select-Object Name, Length, LastWriteTime, Attributes`\n\nLinux\n\n- File System Commands: Use `ls -l` or stat to retrieve file metadata: `stat /path/to/file`\n- Auditd: Configure audit rules to log metadata access: `auditctl -w /path/to/file -p wa -k file_metadata`\n- Filesystem Integrity Tools: Tools like tripwire or AIDE (Advanced Intrusion Detection Environment) can monitor file metadata changes.\n\nmacOS\n\n- FSEvents: Use FSEvents to track file metadata changes.\n- Endpoint Security Framework (ESF): Capture metadata-related events via ESF APIs.\n- Command-Line Tools: Use ls -l or xattr for file attributes: `ls -l@ /path/to/file`\n\nSIEM Integration\n\n- Forward file metadata logs from endpoint or network devices to a SIEM for centralized analysis."
        },
        {
          "name": "File: File Modification",
          "description": "Changes made to a file, including updates to its contents, metadata, access permissions, or attributes. These modifications may indicate legitimate activity (e.g., software updates) or unauthorized changes (e.g., tampering, ransomware, or adversarial modifications). Examples: \n\n- Content Modifications: Changes to the content of a configuration file, such as modifying `/etc/ssh/sshd_config` on Linux or `C:\\Windows\\System32\\drivers\\etc\\hosts` on Windows.\n- Permission Changes: Altering file permissions to allow broader access, such as changing a file from `644` to `777` on Linux or modifying NTFS permissions on Windows.\n- Attribute Modifications: Changing a file's attributes to hidden, read-only, or system on Windows.\n- Timestamp Manipulation: Adjusting a file's creation or modification timestamp using tools like `touch` in Linux or timestomping tools on Windows.\n- Software or System File Changes: Modifying system files such as `boot.ini`, kernel modules, or application binaries.\n\nThis data component can be collected through the following measures:\n\nWindows\n\n- Event Logs: Enable file system auditing to monitor file modifications using Security Event ID 4670 (File System Audit) or Sysmon Event ID 2 (File creation time changed).\n- PowerShell: Use Get-ItemProperty or Get-Acl cmdlets to monitor file properties: `Get-Item -Path \"C:\\path\\to\\file\" | Select-Object Name, Attributes, LastWriteTime`\n\nLinux\n\n- File System Monitoring: Use tools like auditd with rules to monitor file modifications: `auditctl -w /path/to/file -p wa -k file_modification`\n- Inotify: Use inotifywait to watch for real-time changes to files or directories: `inotifywait -m /path/to/file`\n\nmacOS\n\n- Endpoint Security Framework (ESF): Monitor file modification events using ESF APIs.\n- Audit Framework: Configure audit rules to track file changes.\n- Command-Line Tools: Use fs_usage to monitor file activities: `fs_usage -w /path/to/file`\n\nSIEM Tools\n\n- Collect logs from endpoint agents (e.g., Sysmon, Auditd) and file servers to centralize file modification event data."
        }
      ]
    },
    {
      "id": "DS0024",
      "name": "Windows Registry",
      "description": "A Windows OS hierarchical database that stores much of the information and settings for software programs, hardware devices, user preferences, and operating-system configurations(Citation: Microsoft Registry)",
      "components": [
        {
          "name": "Windows Registry: Windows Registry Key Deletion",
          "description": "The removal of a registry key within the Windows operating system.\n\n*Data Collection Measures:*\n\n- Windows Event Logs\n    - Event ID 4658 - Registry Key Handle Closed: Captures when a handle to a registry key is closed, which may indicate deletion.\n    - Event ID 4660 - Object Deleted: Logs when a registry key is deleted.\n- Sysmon (System Monitor) for Windows\n    - Sysmon Event ID 12 - Registry Key Deleted: Logs when a registry key is removed.\n    - Sysmon Event ID 13 - Registry Value Deleted: Captures removal of specific registry values.\n- Endpoint Detection and Response (EDR) Solutions\n    - Monitor registry deletions for suspicious behavior."
        },
        {
          "name": "Windows Registry: Windows Registry Key Modification",
          "description": "Changes made to an existing registry key or its values. These modifications can include altering permissions, modifying stored data, or updating configuration settings.\n\n*Data Collection Measures:*\n\n- Windows Event Logs\n    - Event ID 4657 - Registry Value Modified: Logs changes to registry values, including modifications to startup entries, security settings, or system configurations.\n- Sysmon (System Monitor) for Windows\n    - Sysmon Event ID 13 - Registry Value Set: Captures changes to specific registry values.\n    - Sysmon Event ID 14 - Registry Key & Value Renamed: Logs renaming of registry keys, which may indicate evasion attempts.\n- Endpoint Detection and Response (EDR) Solutions\n    - Monitor registry modifications for suspicious behavior."
        }
      ]
    },
    {
      "id": "DS0028",
      "name": "Logon Session",
      "description": "Logon occurring on a system or resource (local, domain, or cloud) to which a user/device is gaining access after successful authentication and authorization(Citation: Microsoft Audit Logon Events)",
      "components": [
        {
          "name": "Logon Session: Logon Session Creation",
          "description": "The successful establishment of a new user session following a successful authentication attempt. This typically signifies that a user has provided valid credentials or authentication tokens, and the system has initiated a session associated with that user account. This data is crucial for tracking authentication events and identifying potential unauthorized access. Examples: \n\n- Windows Systems\n    - Event ID: 4624\n        - Logon Type: 2 (Interactive) or 10 (Remote Interactive via RDP).\n        - Account Name: JohnDoe\n        - Source Network Address: 192.168.1.100\n        - Authentication Package: NTLM\n- Linux Systems\n    - /var/log/utmp or /var/log/wtmp:\n        - Log format: login user [tty] from [source_ip]\n        - User: jane\n        - IP: 10.0.0.5\n        - Timestamp: 2024-12-28 08:30:00\n- macOS Systems\n    - /var/log/asl.log or unified logging framework:\n        - Log: com.apple.securityd: Authentication succeeded for user 'admin'\n- Cloud Environments\n    - Azure Sign-In Logs:\n        - Activity: Sign-in successful\n        - Client App: Browser\n        - Location: Unknown (Country: X)\n- Google Workspace\n    - Activity: Login\n        - Event Type: successful_login\n        - Source IP: 203.0.113.55\n\nThis data component can be collected through the following measures:\n\n- Windows Systems\n    - Event Logs: Monitor Security Event Logs using Event ID 4624 for successful logons.\n    - PowerShell Example: `Get-EventLog -LogName Security -InstanceId 4624`\n- Linux Systems\n    - Log Files: Monitor `/var/log/utmp`, `/var/log/wtmp`, or `/var/log/auth.log` for logon events.\n    - Tools: Use `last` or `who` commands to parse login records.\n- macOS Systems\n    - Log Sources: Monitor `/var/log/asl.log` or Apple Unified Logs using the `log show` command.\n    - Command Example: `log show --predicate 'eventMessage contains \"Authentication succeeded\"' --info`\n- Cloud Environments\n    - Azure AD: Use Azure Monitor to analyze sign-in logs. Example CLI Query: `az monitor log-analytics query -w <workspace_id> --analytics-query \"AzureActivity | where ActivityStatus == 'Success' and OperationName == 'Sign-in'\"`\n    - Google Workspace: Enable and monitor Login Audit logs from the Admin Console.\n    - Office 365: Use Audit Log Search in Microsoft 365 Security & Compliance Center for login-related events.\n- Network Logs\n    - Sources: Network authentication mechanisms (e.g., RADIUS or TACACS logs).\n- Enable EDR Monitoring: \n    - EDR tools monitor logon session activity, including the creation of new sessions.\n    - Configure alerts for: Suspicious logon types (e.g., Logon Type 10 for RDP or Type 5 for Service). Logons from unusual locations, accounts, or devices.\n    - Leverage EDR telemetry for session attributes like source IP, session duration, and originating process."
        },
        {
          "name": "Logon Session: Logon Session Metadata",
          "description": "Contextual data about a logon session, such as username, logon type, access tokens (security context, user SIDs, logon identifiers, and logon SID), and any activity associated within it"
        }
      ]
    },
    {
      "id": "DS0029",
      "name": "Network Traffic",
      "description": "Data transmitted across a network (ex: Web, DNS, Mail, File, etc.), that is either summarized (ex: Netflow) and/or captured as raw data in an analyzable format (ex: PCAP)",
      "components": [
        {
          "name": "Network Traffic: Network Connection Creation",
          "description": "The initial establishment of a network session, where a system or process initiates a connection to a local or remote endpoint. This typically involves capturing socket information (source/destination IP, ports, protocol) and tracking session metadata. Monitoring these events helps detect lateral movement, exfiltration, and command-and-control (C2) activities.\n\n*Data Collection Measures:*\n\n- Windows:\n    - Event ID 5156 \u0096 Filtering Platform Connection - Logs network connections permitted by Windows Filtering Platform (WFP).\n    - Sysmon Event ID 3 \u0096 Network Connection Initiated - Captures process, source/destination IP, ports, and parent process.\n- Linux/macOS:\n    - Netfilter (iptables), nftables logs - Tracks incoming and outgoing network connections.\n    - AuditD (`connect` syscall) - Logs TCP, UDP, and ICMP connections.\n    - Zeek (`conn.log`) - Captures protocol, duration, and bytes transferred.\n- Cloud & Network Infrastructure:\n    - AWS VPC Flow Logs / Azure NSG Flow Logs - Logs IP traffic at the network level in cloud environments.\n    - Zeek (conn.log) or Suricata (network events) - Captures packet metadata for detection and correlation.\n- Endpoint Detection & Response (EDR):\n    - Detect anomalous network activity such as new C2 connections or data exfiltration attempts."
        },
        {
          "name": "Network Traffic: Network Traffic Content",
          "description": "The full packet capture (PCAP) or session data that logs both protocol headers and payload content. This allows analysts to inspect command and control (C2) traffic, exfiltration, and other suspicious activity within network communications. Unlike metadata-based logs, full content analysis enables deeper protocol inspection, payload decoding, and forensic investigations.\n\n*Data Collection Measures:*\n\n- Network Packet Capture (Full Content Logging)\n    - Wireshark / tcpdump / tshark\n        - Full packet captures (PCAP files) for manual analysis or IDS correlation. `tcpdump -i eth0 -w capture.pcap`\n    - Zeek (formerly Bro)\n        - Extracts protocol headers and payload details into structured logs. `echo \"redef Log::default_store = Log::ASCII;\" > local.zeek | zeek -Cr capture.pcap local.zeek`\n    - Suricata / Snort (IDS/IPS with PCAP Logging)\n        - Deep packet inspection (DPI) with signature-based and behavioral analysis. `suricata -c /etc/suricata/suricata.yaml -i eth0 -l /var/log/suricata`\n- Host-Based Collection\n    - Sysmon Event ID 22 \u0096 DNS Query Logging, Captures DNS requests made by processes, useful for detecting C2 domains.\n    - Sysmon Event ID 3 \u0096 Network Connection Initiated, Logs process-to-network connection relationships.\n    - AuditD (Linux) \u0096 syscall=connect, Monitors outbound network requests from processes. `auditctl -a always,exit -F arch=b64 -S connect -k network_activity`\n- Cloud & SaaS Traffic Collection\n    - AWS VPC Flow Logs / Azure NSG Flow Logs / Google VPC Flow Logs, Captures metadata about inbound/outbound network traffic.\n    - Cloud IDS (AWS GuardDuty, Azure Sentinel, Google Chronicle), Detects malicious activity in cloud environments by analyzing network traffic patterns."
        },
        {
          "name": "Network Traffic: Network Traffic Flow",
          "description": "Summarized network packet data that captures session-level details such as source/destination IPs, ports, protocol types, timestamps, and data volume, without storing full packet payloads. This is commonly used for traffic analysis, anomaly detection, and network performance monitoring.\n\n*Data Collection Measures:*\n\n- Network Flow Logs (Metadata Collection)\n    - NetFlow \n        - Summarized metadata for network conversations (no packet payloads).\n    - sFlow (Sampled Flow Logging)\n        - Captures sampled packets from switches and routers.\n        - Used for real-time traffic monitoring and anomaly detection.\n    - Zeek (Bro) Flow Logs\n        - Zeek logs session-level details in logs like conn.log, http.log, dns.log, etc.\n- Host-Based Collection\n    - Sysmon Event ID 3 \u0096 Network Connection Initiated\n        - Logs process-level network activity, useful for detecting malicious outbound connections.\n    - AuditD (Linux) \u0096 syscall=connect\n        - Monitors system calls for network connections. `auditctl -a always,exit -F arch=b64 -S connect -k network_activity`\n- Cloud & SaaS Flow Monitoring\n    - AWS VPC Flow Logs\n        - Captures metadata for traffic between EC2 instances, security groups, and internet gateways.\n    - Azure NSG Flow Logs / Google VPC Flow Logs\n        - Logs ingress/egress traffic for cloud-based resources."
        }
      ]
    },
    {
      "id": "DS0033",
      "name": "Network Share",
      "description": "A storage resource (typically a folder or drive) made available from one host to others using network protocols, such as Server Message Block (SMB) or Network File System (NFS)(Citation: Microsoft NFS Overview)",
      "components": [
        {
          "name": "Network Share: Network Share Access",
          "description": "Opening a network share, which makes the contents available to the requestor (ex: Windows EID 5140 or 5145)\n\n*Data Collection Measures:*\n\n- Windows:\n    - Event ID 5140 \u0096 Network Share Object Access Logs every access attempt to a network share.\n    - Event ID 5145 \u0096 Detailed Network Share Object Access Captures granular access control information, including the requesting user, source IP, and access permissions.\n    - Sysmon Event ID 3 \u0096 Network Connection Initiated Helps track SMB connections to suspicious or unauthorized network shares.\n    - Enable Audit Policy for Network Share Access: `auditpol /set /subcategory:\"File Share\" /success:enable /failure:enable`\n    - Enable PowerShell Logging to Detect Unauthorized SMB Access: `Set-ExecutionPolicy RemoteSigned`\n    - Restrict Network Share Access with Group Policy (GPO): `Computer Configuration ? Windows Settings ? Security Settings ? Local Policies ? User Rights Assignment` Set \"Access this computer from the network\" to restrict unauthorized accounts.\n- Linux/macOS:\n    - AuditD (`open`, `read`, `write`, `connect` syscalls) Detects access to NFS, CIFS, and SMB network shares.\n    - Lsof (`lsof | grep nfs` or `lsof | grep smb`) Identifies active network share connections.\n    - Mount (`mount | grep nfs` or `mount | grep cifs`) Lists currently mounted network shares.\n    - Enable AuditD for SMB/NFS Access: `auditctl -a always,exit -F arch=b64 -S open -F path=/mnt/share -k network_share_access`\n    - Monitor Active Network Shares Using Netstat: `netstat -an | grep :445`\n- Endpoint Detection & Response (EDR):\n    - Detects abnormal network share access behavior, such as unusual account usage, large file transfers, or encrypted file activity."
        }
      ]
    }
  ],
  "observable_types": [
    {
      "name": "Process",
      "category": "Host",
      "description": "Observation related to Process. Includes host-based indicators such as account, process, file, or service activity. Applicable to endpoint monitoring in both IT and ICS environments."
    },
    {
      "name": "Process: OS API Execution",
      "category": "Host",
      "description": "Observation related to Process: OS API Execution. Includes host-based indicators such as account, process, file, or service activity. Applicable to endpoint monitoring in both IT and ICS environments."
    },
    {
      "name": "Process: Process Creation",
      "category": "Host",
      "description": "Creation of new system processes. Example on Windows: PowerShell spawning rundll32.exe. Example on Linux: Reverse shell initiated by netcat process. Real-world scenario: Malicious HMI application spawns unauthorized control processes."
    },
    {
      "name": "Process: Process Metadata",
      "category": "Host",
      "description": "Observation related to Process: Process Metadata. Includes host-based indicators such as account, process, file, or service activity. Applicable to endpoint monitoring in both IT and ICS environments."
    },
    {
      "name": "Process: Process Termination",
      "category": "Host",
      "description": "Observation related to Process: Process Termination. Includes host-based indicators such as account, process, file, or service activity. Applicable to endpoint monitoring in both IT and ICS environments."
    },
    {
      "name": "Script",
      "category": "Host",
      "description": "Observation related to Script. Includes host-based indicators such as account, process, file, or service activity. Applicable to endpoint monitoring in both IT and ICS environments."
    },
    {
      "name": "Script: Script Execution",
      "category": "Host",
      "description": "Observation related to Script: Script Execution. Includes host-based indicators such as account, process, file, or service activity. Applicable to endpoint monitoring in both IT and ICS environments."
    },
    {
      "name": "Application Log",
      "category": "Host",
      "description": "Observation related to Application Log. Includes host-based indicators such as account, process, file, or service activity. Applicable to endpoint monitoring in both IT and ICS environments."
    },
    {
      "name": "Application Log: Application Log Content",
      "category": "Host",
      "description": "Observation related to Application Log: Application Log Content. Includes host-based indicators such as account, process, file, or service activity. Applicable to endpoint monitoring in both IT and ICS environments."
    },
    {
      "name": "Command",
      "category": "Host",
      "description": "Observation related to Command. Includes host-based indicators such as account, process, file, or service activity. Applicable to endpoint monitoring in both IT and ICS environments."
    },
    {
      "name": "Command: Command Execution",
      "category": "Host",
      "description": "Execution of system-level commands or scripts. Example on Windows: cmd.exe runs base64-encoded payload. Example on Linux: Bash executes reverse shell via curl|bash. Real-world scenario: Remote operator executes PLC debug commands."
    },
    {
      "name": "Service",
      "category": "Host",
      "description": "Creation or modification of services that persist or execute on boot. Example on Windows: Malicious service registered via sc.exe. Example on Linux: New systemd unit file in /etc/systemd/system. Real-world scenario: Backdoor installed as ICS alarm monitoring service."
    },
    {
      "name": "Service: Service Creation",
      "category": "Host",
      "description": "Creation or modification of services that persist or execute on boot. Example on Windows: Malicious service registered via sc.exe. Example on Linux: New systemd unit file in /etc/systemd/system. Real-world scenario: Backdoor installed as ICS alarm monitoring service."
    },
    {
      "name": "Service: Service Metadata",
      "category": "Host",
      "description": "Creation or modification of services that persist or execute on boot. Example on Windows: Malicious service registered via sc.exe. Example on Linux: New systemd unit file in /etc/systemd/system. Real-world scenario: Backdoor installed as ICS alarm monitoring service."
    },
    {
      "name": "Service: Service Modification",
      "category": "Host",
      "description": "Creation or modification of services that persist or execute on boot. Example on Windows: Malicious service registered via sc.exe. Example on Linux: New systemd unit file in /etc/systemd/system. Real-world scenario: Backdoor installed as ICS alarm monitoring service."
    },
    {
      "name": "File",
      "category": "Host",
      "description": "Observation related to File. Includes host-based indicators such as account, process, file, or service activity. Applicable to endpoint monitoring in both IT and ICS environments."
    },
    {
      "name": "File: File Access",
      "category": "Host",
      "description": "Observation related to File: File Access. Includes host-based indicators such as account, process, file, or service activity. Applicable to endpoint monitoring in both IT and ICS environments."
    },
    {
      "name": "File: File Creation",
      "category": "Host",
      "description": "Detection of new files created on disk. Example on Windows: New DLL dropped in System32. Example on Linux: Web shell uploaded to /var/www/html. Real-world scenario: Exploit payload written to PLC config directory."
    },
    {
      "name": "File: File Deletion",
      "category": "Host",
      "description": "Observation related to File: File Deletion. Includes host-based indicators such as account, process, file, or service activity. Applicable to endpoint monitoring in both IT and ICS environments."
    },
    {
      "name": "File: File Metadata",
      "category": "Host",
      "description": "Observation related to File: File Metadata. Includes host-based indicators such as account, process, file, or service activity. Applicable to endpoint monitoring in both IT and ICS environments."
    },
    {
      "name": "File: File Modification",
      "category": "Host",
      "description": "Observation related to File: File Modification. Includes host-based indicators such as account, process, file, or service activity. Applicable to endpoint monitoring in both IT and ICS environments."
    },
    {
      "name": "Windows Registry",
      "category": "Host",
      "description": "Changes to Windows Registry keys or values. Example: Autorun value added to HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run. Real-world scenario: ICS software persistence via registry run key."
    },
    {
      "name": "Windows Registry: Windows Registry Key Deletion",
      "category": "Host",
      "description": "Changes to Windows Registry keys or values. Example: Autorun value added to HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run. Real-world scenario: ICS software persistence via registry run key."
    },
    {
      "name": "Windows Registry: Windows Registry Key Modification",
      "category": "Host",
      "description": "Changes to Windows Registry keys or values. Example: Autorun value added to HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run. Real-world scenario: ICS software persistence via registry run key."
    },
    {
      "name": "Logon Session",
      "category": "Host",
      "description": "Observation related to Logon Session. Includes host-based indicators such as account, process, file, or service activity. Applicable to endpoint monitoring in both IT and ICS environments."
    },
    {
      "name": "Logon Session: Logon Session Creation",
      "category": "Host",
      "description": "Observation related to Logon Session: Logon Session Creation. Includes host-based indicators such as account, process, file, or service activity. Applicable to endpoint monitoring in both IT and ICS environments."
    },
    {
      "name": "Logon Session: Logon Session Metadata",
      "category": "Host",
      "description": "Observation related to Logon Session: Logon Session Metadata. Includes host-based indicators such as account, process, file, or service activity. Applicable to endpoint monitoring in both IT and ICS environments."
    },
    {
      "name": "Network Traffic",
      "category": "Network",
      "description": "Network observable related to Network Traffic. Covers connection behavior, flow metadata, and content patterns. Used in anomaly detection for ICS protocol misuse or lateral movement."
    },
    {
      "name": "Network Traffic: Network Connection Creation",
      "category": "Network",
      "description": "Creation of new network connections between hosts. Example on Windows: Outbound TCP to known C2 IP via svchost.exe. Example on Linux: SSH connection to nonstandard port. Real-world scenario: Unauthorized ICS device opens connection to external IP."
    },
    {
      "name": "Network Traffic: Network Traffic Content",
      "category": "Network",
      "description": "Raw content within network sessions. Example: Extracted payload from Modbus TCP session. Real-world scenario: Sensitive control commands seen in cleartext ICS protocol stream."
    },
    {
      "name": "Network Traffic: Network Traffic Flow",
      "category": "Network",
      "description": "Network observable related to Network Traffic: Network Traffic Flow. Covers connection behavior, flow metadata, and content patterns. Used in anomaly detection for ICS protocol misuse or lateral movement."
    },
    {
      "name": "Network Share",
      "category": "Network",
      "description": "Network observable related to Network Share. Covers connection behavior, flow metadata, and content patterns. Used in anomaly detection for ICS protocol misuse or lateral movement."
    },
    {
      "name": "Network Share: Network Share Access",
      "category": "Network",
      "description": "Network observable related to Network Share: Network Share Access. Covers connection behavior, flow metadata, and content patterns. Used in anomaly detection for ICS protocol misuse or lateral movement."
    }
  ],
  "use_cases": [
    {
      "id": 23,
      "name": "DETECT: Continuous Monitoring",
      "csf_category_id": "DE.CM",
      "csf_function_id": "DE",
      "description": "Assets are monitored to find anomalies, indicators of compromise, and other potentially adverse events",
      "subcategories_json": "[{\"id\": \"DE.CM-01\", \"title\": \"\", \"text\": \"\"}, {\"id\": \"DE.CM-02\", \"title\": \"\", \"text\": \"The physical environment is monitored to find potentially adverse events\"}, {\"id\": \"DE.CM-03\", \"title\": \"\", \"text\": \"\"}, {\"id\": \"DE.CM-04\", \"title\": \"\", \"text\": \"Malicious code is detected\"}, {\"id\": \"DE.CM-05\", \"title\": \"\", \"text\": \"Unauthorized mobile code is detected\"}, {\"id\": \"DE.CM-06\", \"title\": \"\", \"text\": \"\"}, {\"id\": \"DE.CM-07\", \"title\": \"\", \"text\": \"Monitoring for unauthorized personnel, connections, devices, and software is performed\"}, {\"id\": \"DE.CM-08\", \"title\": \"\", \"text\": \"Vulnerability scans are performed\"}, {\"id\": \"DE.CM-09\", \"title\": \"\", \"text\": \"Computing hardware and software, runtime environments, and their data are monitored to find potentially adverse events\"}]",
      "examples_json": "[{\"subcategory_id\": \"DE.CM-02\", \"example_id\": \"DE.CM-02.276\", \"text\": \"Monitor logs from physical access control systems (e.g., badge readers) to find unusual access patterns (e.g., deviations from the norm) and failed access attempts\"}, {\"subcategory_id\": \"DE.CM-02\", \"example_id\": \"DE.CM-02.277\", \"text\": \"Review and monitor physical access records (e.g., from visitor registration, sign-in sheets)\"}, {\"subcategory_id\": \"DE.CM-02\", \"example_id\": \"DE.CM-02.278\", \"text\": \"Monitor physical access controls (e.g., locks, latches, hinge pins, alarms) for signs of tampering\"}, {\"subcategory_id\": \"DE.CM-02\", \"example_id\": \"DE.CM-02.279\", \"text\": \"Monitor the physical environment using alarm systems, cameras, and security guards\"}, {\"subcategory_id\": \"DE.CM-09\", \"example_id\": \"DE.CM-09.285\", \"text\": \"Monitor email, web, file sharing, collaboration services, and other common attack vectors to detect malware, phishing, data leaks and exfiltration, and other adverse events\"}, {\"subcategory_id\": \"DE.CM-09\", \"example_id\": \"DE.CM-09.286\", \"text\": \"Monitor authentication attempts to identify attacks against credentials and unauthorized credential reuse\"}, {\"subcategory_id\": \"DE.CM-09\", \"example_id\": \"DE.CM-09.287\", \"text\": \"Monitor software configurations for deviations from security baselines\"}, {\"subcategory_id\": \"DE.CM-09\", \"example_id\": \"DE.CM-09.288\", \"text\": \"Monitor hardware and software for signs of tampering\"}, {\"subcategory_id\": \"DE.CM-09\", \"example_id\": \"DE.CM-09.289\", \"text\": \"Use technologies with a presence on endpoints to detect cyber health issues (e.g., missing patches, malware infections, unauthorized software), and redirect the endpoints to a remediation environment before access is authorized\"}]"
    },
    {
      "id": 24,
      "name": "DETECT: Adverse Event Analysis",
      "csf_category_id": "DE.AE",
      "csf_function_id": "DE",
      "description": "A baseline of network operations and expected data flows for users and systems is established and managed Potentially adverse events are analyzed to better understand associated activities Information is correlated from multiple sources The estimated impact and scope of adverse events are understood Incident alert thresholds are established Cyber threat intelligence and other contextual information are integrated into the analysis Incidents are declared when adverse events meet the defined incident criteria",
      "subcategories_json": "[{\"id\": \"DE.AE-01\", \"title\": \"\", \"text\": \"A baseline of network operations and expected data flows for users and systems is established and managed\"}, {\"id\": \"DE.AE-02\", \"title\": \"\", \"text\": \"Potentially adverse events are analyzed to better understand associated activities\"}, {\"id\": \"DE.AE-03\", \"title\": \"\", \"text\": \"Information is correlated from multiple sources\"}, {\"id\": \"DE.AE-04\", \"title\": \"\", \"text\": \"The estimated impact and scope of adverse events are understood\"}, {\"id\": \"DE.AE-05\", \"title\": \"\", \"text\": \"Incident alert thresholds are established\"}, {\"id\": \"DE.AE-06\", \"title\": \"\", \"text\": \"\"}, {\"id\": \"DE.AE-07\", \"title\": \"\", \"text\": \"Cyber threat intelligence and other contextual information are integrated into the analysis\"}, {\"id\": \"DE.AE-08\", \"title\": \"\", \"text\": \"Incidents are declared when adverse events meet the defined incident criteria\"}]",
      "examples_json": "[{\"subcategory_id\": \"DE.AE-02\", \"example_id\": \"DE.AE-02.290\", \"text\": \"Use security information and event management (SIEM) or other tools to continuously monitor log events for known malicious and suspicious activity\"}, {\"subcategory_id\": \"DE.AE-02\", \"example_id\": \"DE.AE-02.291\", \"text\": \"Utilize up-to-date cyber threat intelligence in log analysis tools to improve detection accuracy and characterize threat actors, their methods, and indicators of compromise\"}, {\"subcategory_id\": \"DE.AE-02\", \"example_id\": \"DE.AE-02.292\", \"text\": \"Regularly conduct manual reviews of log events for technologies that cannot be sufficiently monitored through automation\"}, {\"subcategory_id\": \"DE.AE-02\", \"example_id\": \"DE.AE-02.293\", \"text\": \"Use log analysis tools to generate reports on their findings\"}, {\"subcategory_id\": \"DE.AE-03\", \"example_id\": \"DE.AE-03.294\", \"text\": \"Constantly transfer log data generated by other sources to a relatively small number of log servers\"}, {\"subcategory_id\": \"DE.AE-03\", \"example_id\": \"DE.AE-03.295\", \"text\": \"Use event correlation technology (e.g., SIEM) to collect information captured by multiple sources\"}, {\"subcategory_id\": \"DE.AE-03\", \"example_id\": \"DE.AE-03.296\", \"text\": \"Utilize cyber threat intelligence to help correlate events among log sources\"}, {\"subcategory_id\": \"DE.AE-04\", \"example_id\": \"DE.AE-04.297\", \"text\": \"Use SIEMs or other tools to estimate impact and scope, and review and refine the estimates\"}, {\"subcategory_id\": \"DE.AE-04\", \"example_id\": \"DE.AE-04.298\", \"text\": \"A person creates their own estimates of impact and scope\"}, {\"subcategory_id\": \"DE.AE-07\", \"example_id\": \"DE.AE-07.303\", \"text\": \"Securely provide cyber threat intelligence feeds to detection technologies, processes, and personnel\"}, {\"subcategory_id\": \"DE.AE-07\", \"example_id\": \"DE.AE-07.304\", \"text\": \"Securely provide information from asset inventories to detection technologies, processes, and personnel\"}, {\"subcategory_id\": \"DE.AE-07\", \"example_id\": \"DE.AE-07.305\", \"text\": \"Rapidly acquire and analyze vulnerability disclosures for the organization's technologies from suppliers, vendors, and third-party security advisories\"}, {\"subcategory_id\": \"DE.AE-08\", \"example_id\": \"DE.AE-08.306\", \"text\": \"Apply incident criteria to known and assumed characteristics of activity in order to determine whether an incident should be declared\"}, {\"subcategory_id\": \"DE.AE-08\", \"example_id\": \"DE.AE-08.307\", \"text\": \"Take known false positives into account when applying incident criteria\"}]"
    },
    {
      "id": 25,
      "name": "DETECT: Detection Processes",
      "csf_category_id": "DE.DP",
      "csf_function_id": "DE",
      "description": "Roles and responsibilities for detection are well defined to ensure accountability Detection activities comply with all applicable requirements Detection processes are tested Event detection information is communicated Detection processes are continuously improved",
      "subcategories_json": "[{\"id\": \"DE.DP-01\", \"title\": \"\", \"text\": \"Roles and responsibilities for detection are well defined to ensure accountability\"}, {\"id\": \"DE.DP-02\", \"title\": \"\", \"text\": \"Detection activities comply with all applicable requirements\"}, {\"id\": \"DE.DP-03\", \"title\": \"\", \"text\": \"Detection processes are tested\"}, {\"id\": \"DE.DP-04\", \"title\": \"\", \"text\": \"Event detection information is communicated\"}, {\"id\": \"DE.DP-05\", \"title\": \"\", \"text\": \"Detection processes are continuously improved\"}]",
      "examples_json": "[]"
    }
  ],
  "deployment_context": {
    "trl": {
      "id": 3,
      "level": 3,
      "name": "Analytical and Experimental Proof\u2011of\u2011Concept",
      "description": "Laboratory proof\u2011of\u2011concept via analyses and early prototypes.",
      "deliverables": "['Lab\u2011scale prototypes or test articles', 'Test plans/fixtures', 'Performance reports comparing measured vs. predicted metrics']",
      "users": "['Lab R&D engineers', 'Prototype developers', 'Systems analysts']",
      "environment": "Bench\u2011scale labs and high\u2011fidelity simulations",
      "scale": "Lab pieces (bench\u2011scale prototypes)",
      "commercial_viable": 0,
      "label": "Analytical and Experimental Proof\u2011of\u2011Concept"
    },
    "hosting_env": {
      "id": 4,
      "label": "Containerized (Docker)",
      "description": "Tool is deployed in a Docker or Podman container, either standalone or as part of a multi-container stack."
    },
    "interfaces": [
      {
        "id": 1,
        "label": "Command-Line Interface (CLI)",
        "description": "Interaction via shell or terminal using typed commands for configuration or execution.",
        "note": "The tool is command line interface with an optional command line GUI"
      }
    ],
    "access_methods": [
      {
        "id": 1,
        "label": "Access: Website",
        "description": "Tool or service is accessed via a public or internal website URL."
      },
      {
        "id": 2,
        "label": "Access: GitHub Repository",
        "description": "Tool is available as open-source or binary via GitHub."
      },
      {
        "id": 7,
        "label": "Access: CLI Executable",
        "description": "Tool is executed directly via command line from a local or remote system."
      }
    ],
    "input_types": [
      {
        "id": null,
        "label": "User Input into the command line is the input type.",
        "description": "",
        "note": ""
      }
    ],
    "output_types": [
      {
        "id": 1,
        "label": "STIX 2.1 Bundle",
        "description": "Structured CTI output used for intelligence sharing and correlation"
      },
      {
        "id": 2,
        "label": "JSON File",
        "description": "Structured machine-readable output (e.g., alerts, configs, observables)"
      },
      {
        "id": 3,
        "label": "CSV Export",
        "description": "Tabular data for analysis in tools like Excel, pandas, or SOC dashboards"
      },
      {
        "id": 4,
        "label": "PDF Summary Report",
        "description": "Rich narrative output including results, analysis, figures, and recommendations"
      },
      {
        "id": 11,
        "label": "MITRE ATT&CK Mapping File",
        "description": "Export of detected or supported techniques in STIX, JSON, or Markdown"
      },
      {
        "id": 15,
        "label": "Timeline Output",
        "description": "Temporal view of events, incidents, or attacks (CSV, JSON, HTML)"
      },
      {
        "id": 17,
        "label": "Research Dataset",
        "description": "Labeled, anonymized, or synthetic dataset produced by simulations"
      }
    ],
    "import_formats": [
      {
        "id": 1,
        "label": "STIX 2.1 Bundle",
        "description": "Structured CTI ingestion format used in threat intelligence systems (e.g., OpenCTI, MISP)"
      },
      {
        "id": 2,
        "label": "JSON File",
        "description": "Generic structured data input format used for configurations, enrichment, or model-based inputs"
      },
      {
        "id": 3,
        "label": "CSV File",
        "description": "Spreadsheet-compatible format used for importing indicators, logs, or IOC lists"
      },
      {
        "id": 4,
        "label": "PCAP File",
        "description": "Packet capture file for ingesting raw network traffic for analysis"
      },
      {
        "id": 5,
        "label": "PDF Document",
        "description": "Narrative reports or fact sheets used for NLP-based entity extraction or contextual ingestion"
      }
    ],
    "export_formats": [
      {
        "id": 1,
        "label": "STIX 2.1",
        "description": "Structured Threat Intelligence format (OASIS) for sharing CTI with tools like OpenCTI, MISP"
      },
      {
        "id": 2,
        "label": "JSON",
        "description": "General-purpose structured format for config, logs, telemetry, or API response data"
      },
      {
        "id": 3,
        "label": "CSV",
        "description": "Tabular data format for structured logs, observables, indicators, or reports"
      },
      {
        "id": 4,
        "label": "PDF",
        "description": "Human-readable output for briefings, summaries, or deliverables"
      },
      {
        "id": 5,
        "label": "TXT",
        "description": "Raw log export or plain text data for analyst review"
      }
    ]
  },
  "targeted_assets": [
    {
      "id": "A0003",
      "name": "Programmable Logic Controller (PLC)",
      "description": "A Programmable Logic Controller (PLC) is an embedded programmable control device. PLCs typically utilize a modular architecture with separate modules used to support its processing capabilities, communication mediums, and I/O interfaces. PLCs allow for the deployment of customized programs/logic to control or monitor an operational process. This logic is defined using industry specific programming languages, such as IEC 61131 (Citation: IEC February 2013), which define the set of tasks and program organizational units (POUs) included in the device\u2019s programs.  PLCs also typically have distinct operating modes (e.g., Remote, Run, Program, Stop) which are used to determine when the device can be programmed or whether it should execute the custom logic."
    },
    {
      "id": "A0006",
      "name": "Data Historian",
      "description": "Data historians, or historian, are systems used to collect and store data, including telemetry, events, alerts, and alarms about the operational process and supporting devices. The historian typically utilizes a database to store this data, and commonly provide tools and interfaces to support the analysis of the data. Data historians are often used to support various engineering or business analysis functions and therefore commonly needs access from the corporate network. Data historians often work in a hierarchical paradigm where lower/site level historians collect and store data which is then aggregated into a site/plant level historian. Therefore, data historians often have remote services that can be accessed externally from the ICS network."
    },
    {
      "id": "A0007",
      "name": "Control Server",
      "description": "Control servers are typically a software platform that runs on a modern server operating system (e.g., MS Windows Server). The server typically uses one or more automation protocols (e.g., Modbus, DNP3) to communicate with the various low-level control devices such as Remote Terminal Units (RTUs) and Programmable Logic Controllers (PLCs). The control server also usually provides an interface/network service to connect with an HMI."
    },
    {
      "id": "A0001",
      "name": "Workstation",
      "description": "Workstations are devices used by human operators or engineers to perform various configuration, programming, maintenance, diagnostic, or operational tasks. Workstations typically utilize standard desktop or laptop hardware and operating systems (e.g., MS Windows), but run dedicated control system applications or diagnostic/management software     to support interfacing with the control servers or field devices. Some workstations have a fixed location within the network architecture, while others are transient devices that are directly connected to various field devices to support local management activities."
    },
    {
      "id": "A0002",
      "name": "Human-Machine Interface (HMI)",
      "description": "Human-Machine Interfaces (HMIs) are systems used by an operator to monitor the real-time status of an operational process and to perform necessary control functions, including the adjustment of device parameters. An HMI can take various forms, including a dedicated screen or control panel integrated with a specific device/controller, or a customizable software GUI application running on a standard operating system (e.g., MS Windows) that interfaces with a control/SCADA server. The HMI is critical to ensuring operators have sufficient visibility and control over the operational process."
    },
    {
      "id": "A0004",
      "name": "Remote Terminal Unit (RTU)",
      "description": "A Remote Terminal Unit (RTU) is a device that typically resides between field devices (e.g., PLCs, IEDs) and control/SCADA servers and supports various communication interfacing and data aggregation functions. RTUs are typically responsible for forwarding commands from the control server and the collection of telemetry, events, and alerts from the field devices. An RTU can be implemented as a dedicated embedded device, as software platform that runs on a hardened/ruggedized computer, or using a custom application program on a PLC."
    },
    {
      "id": "A0005",
      "name": "Intelligent Electronic Device (IED)",
      "description": "An Intelligent Electronic Device (IED) is a type of specialized field device that is designed to perform specific operational functions, frequently for protection, monitoring, or control within the electric sector. IEDs are typically used to both acquire telemetry and execute tailored control algorithms/actions based on customizable parameters/settings. An IED is usually implemented as a dedicated embedded device and supports various network automation protocols to communicate with RTUs and Control Servers."
    },
    {
      "id": "A0008",
      "name": "Application Server",
      "description": "Application servers are used across many different sectors to host various diverse software applications necessary to supporting the ICS. Example functions can include data analytics and reporting, alarm management, and the management/coordination of different control servers.  The application server typically runs on a modern server operating system (e.g., MS Windows Server)."
    },
    {
      "id": "A0009",
      "name": "Data Gateway",
      "description": "Data Gateway is a device that supports the communication and exchange of data between different systems, networks, or protocols within the ICS. Different types of data gateways are used to perform various functions, including:\n\n *  <u>Protocol Translation:</u> Enable communication to devices that support different or incompatible protocols by translating information from one protocol to another. \n *  <u>Media Converter:</u> Convert data across different Layer 1 and 2 network protocols / mediums, for example, converting from Serial to Ethernet. \n *  <u>Data Aggregation:</u> Collect and combine data from different devices into one consistent format and protocol interface. \n\nData gateways are often critical to the forwarding/transmission of critical control or monitoring data within the ICS. Further, these devices often have remote various network services that are used to communicate across different zones or networks.  \n\nThese assets may focus on a single function listed below or combinations of these functions to best fit the industry use-case. \n"
    },
    {
      "id": "A0010",
      "name": "Safety Controller",
      "description": "Safety controllers are typically a type of field device used to perform the safety critical function. Safety controllers often support the deployment of custom programs/logic, similar to a PLC, but can also be tailored for sector specific functions/applications. The safety controllers typically utilize redundant hardware and processors to ensure they operate reliably if a component fails."
    },
    {
      "id": "A0011",
      "name": "Virtual Private Network (VPN) Server",
      "description": "A VPN server is a device that is used to establish a secure network tunnel between itself and other remote VPN devices, including field VPNs. VPN servers can be used to establish a secure connection with a single remote device, or to securely bridge all traffic between two separate networks together by encapsulating all data between those networks. VPN servers typically support remote network services that are used by field VPNs to initiate the establishment of the secure VPN tunnel between the field device and server."
    },
    {
      "id": "A0012",
      "name": "Jump Host",
      "description": "Jump hosts are devices used to support remote management sessions into ICS networks or devices. The system is used to access the ICS environment securely from external networks, such as the corporate network. The user must first remote into the jump host before they can access ICS devices. The jump host may be a customized Windows server using common remote access protocols (e.g., RDP) or a dedicated access management device. The jump host typically performs various security functions to ensure the authenticity of remote sessions, including authentication, enforcing access controls/permissions, and auditing all access attempts.  "
    },
    {
      "id": "A0013",
      "name": "Field I/O",
      "description": "Field I/O are devices that communicate with a controller or data aggregator to either send input data or receive output data. Input data may include readings about a given environment/device state from sensors, while output data may include data sent back to actuators for them to either undertake actions or change parameter values.(Citation: Guidance - NIST SP800-82) These devices are frequently embedded devices running on lightweight embedded operating systems or RTOSes. "
    },
    {
      "id": "A0014",
      "name": "Routers",
      "description": "A computer that is a gateway between two networks at OSI layer 3 and that relays and directs data packets through that inter-network. The most common form of router operates on IP packets.(Citation: IETF RFC4949 2007)"
    }
  ],
  "related_cases": [
    {
      "case_id": "C0030",
      "case_name": "Triton Safety Instrumented System Attack",
      "descriptions": [
        {
          "tech_id": "T0830",
          "tech_name": "Adversary-in-the-Middle",
          "case_description": "In the [Triton Safety Instrumented System Attack](https://attack.mitre.org/campaigns/C0030), [TEMP.Veles](https://attack.mitre.org/groups/G0088) changed phone numbers tied to certain specific accounts in a designated contact list. They then used the changed phone numbers to redirect network traffic to websites controlled by them, thereby allowing them to capture and use any login codes sent to the devices via text message.(Citation: Triton-EENews-2017)"
        }
      ]
    },
    {
      "case_id": "PAR003",
      "case_name": "NIGHT DRAGON CAMPAIGN (2007 TO 2011) TARGETING A U.S.-BASED OIL AND GAS FIRM",
      "descriptions": [
        {
          "tech_id": "T0802",
          "tech_name": "Automated Collection",
          "case_description": "Anomalous Command Issued Via Command-Line: Associated with Execution of Anomalous Executable: gsecdump.exe: Command-Line Arguments (#{gsecdump_exe})"
        },
        {
          "tech_id": "T0811",
          "tech_name": "Data from Information Repositories",
          "case_description": "Anomalous Network Traffic: From Local Host to Remote External Host: Containing Local File Information: Associated with Anomalous Executable: zwShell.exe"
        }
      ]
    },
    {
      "case_id": "PAR004",
      "case_name": "BAKU-TBILISI-CEYHAN (BTC) PIPELINE EXPLOSION IN REFAHIYE, TURKEY 2008",
      "descriptions": [
        {
          "tech_id": "T0811",
          "tech_name": "Data from Information Repositories",
          "case_description": "Anomalous Network Traffic: From External Host to Local Host: To Local Engineering Workstation (EWS) with Remote Terminal Unit (RTU) Application: CitectSCADA 2008 Application: Over Microsoft (MS) Structured Language Query (SQL) Open Database Connectivity (ODBC) TCP Port 20222: Containing 400-Byte Strings"
        }
      ]
    },
    {
      "case_id": "PAR005",
      "case_name": "HAVEX MALWARE IN A U.S. MANUFACTURING FACILITY 2014",
      "descriptions": [
        {
          "tech_id": "T0802",
          "tech_name": "Automated Collection",
          "case_description": "Anomalous Network Traffic: From Control Device to Internal Host:  International Electrotechnical Commission (IEC) 61850 Over TCP Port 102"
        }
      ]
    },
    {
      "case_id": "PAR006",
      "case_name": "Cyber Attack on Thyssenkrupp Blast Furnace 2014",
      "descriptions": [
        {
          "tech_id": "T0802",
          "tech_name": "Automated Collection",
          "case_description": "A Registry Value was Modified (Windows Event ID 4657): Associated with Creation of Multiple Autostart Registry Keys: HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run,| HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce,| HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run,| HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce"
        }
      ]
    },
    {
      "case_id": "PAR008",
      "case_name": "INDUSTROYER TARGETING UKRAINE ELECTRIC POWER TRANSPORT UTILITY (UKRENERGO) 2016",
      "descriptions": [
        {
          "tech_id": "T0802",
          "tech_name": "Automated Collection",
          "case_description": "Anomalous Command Issued Via Command-Line: Anomalous Interface Command on Local Open Platform Communications (OPC) Server: IOPCBrowseServerAddressSpace Function: \"ctlSelOn\", \"ctlSelOff\", \"ctlOperOn\", \"ctlOperOff\", and \"stVal\": Multiple IOPCBrowseServerAddressSpace Function Commands"
        }
      ]
    },
    {
      "case_id": "PAR013",
      "case_name": "NOTPETYA MALWARE ATTACK ON AP MOLLER-MAERSK 2017",
      "descriptions": [
        {
          "tech_id": "T0802",
          "tech_name": "Automated Collection",
          "case_description": "Anomalous Executable Uses Named Pipe: 561D.tmp: \\\\.\\pipe\\{C1F0BF2D-8C17-4550-AF5A-65A22C61739C}"
        }
      ]
    },
    {
      "case_id": "PAR014",
      "case_name": "LOCKERGOGA RANSOMWARE ATTACK ON NORSK HYDRO 2019",
      "descriptions": [
        {
          "tech_id": "T0811",
          "tech_name": "Data from Information Repositories",
          "case_description": "Anomalous System Behavior on Local Host: A Directory Service Object Was Modified (Windows Event ID 5136)"
        }
      ]
    },
    {
      "case_id": "PAR016",
      "case_name": "2020 SOLARWINDS SUPPLY CHAIN COMPROMISE AGAINST A U.S. ENERGY PROVIDER",
      "descriptions": [
        {
          "tech_id": "T0802",
          "tech_name": "Automated Collection",
          "case_description": "Anomalous Network Traffic: From Local Host to External Server: From Local Host with Security Information and Event Management (SIEM) Software to External Server: SolarWinds Orion Platform: Domain Name System (DNS) Over UDP Port 53: To Anomalous Domain: Anomalous Canonical Name (CNAME) Domain Name System (DNS) Requests"
        }
      ]
    },
    {
      "case_id": "PAR024",
      "case_name": "DARKSIDE RANSOMWARE ATTACK ON COLONIAL PIPELINE",
      "descriptions": [
        {
          "tech_id": "T0811",
          "tech_name": "Data from Information Repositories",
          "case_description": "Host Data Collection via Dynamic Link Library (DLL) Execution"
        }
      ]
    },
    {
      "case_id": "PAR025",
      "case_name": "BLACKMATTER RANSOMWARE ATTACK ON NEW COOPERATIVE 2021",
      "descriptions": [
        {
          "tech_id": "T0802",
          "tech_name": "Automated Collection",
          "case_description": "Anomalous Behavior Associated with Native Binary on Local Host: Dynamic Link Library (DLL): comsvcs.dll"
        }
      ]
    },
    {
      "case_id": "S0038",
      "case_name": "Duqu",
      "descriptions": [
        {
          "tech_id": "T0811",
          "tech_name": "Data from Information Repositories",
          "case_description": "[Duqu](https://attack.mitre.org/software/S0038) downloads additional modules for the collection of data in information repositories, including the Infostealer 2 module that can access data from Windows Shares.(Citation: Symantec)"
        },
        {
          "tech_id": "T0893",
          "tech_name": "Data from Local System",
          "case_description": "[Duqu](https://attack.mitre.org/software/S0038) downloads additional modules for the collection of data from local systems. The modules are named: infostealer 1, infostealer 2 and reconnaissance. (Citation: Symantec)"
        }
      ]
    },
    {
      "case_id": "S0093",
      "case_name": "Backdoor.Oldrea",
      "descriptions": [
        {
          "tech_id": "T0802",
          "tech_name": "Automated Collection",
          "case_description": "Using OPC, a component of [Backdoor.Oldrea](https://attack.mitre.org/software/S0093) gathers any details about connected devices and sends them back to the C2 for the attackers to analyze. (Citation: Daavid Hentunen, Antti Tikkanen June 2014)"
        }
      ]
    },
    {
      "case_id": "S0143",
      "case_name": "Flame",
      "descriptions": [
        {
          "tech_id": "T0893",
          "tech_name": "Data from Local System",
          "case_description": "[Flame](https://attack.mitre.org/software/S0143) has built-in modules to gather information from compromised computers. (Citation: Kevin Savage and Branko Spasojevic)"
        }
      ]
    },
    {
      "case_id": "S0604",
      "case_name": "Industroyer",
      "descriptions": [
        {
          "tech_id": "T0802",
          "tech_name": "Automated Collection",
          "case_description": "[Industroyer](https://attack.mitre.org/software/S0604) automatically collects protocol object data to learn about control devices in the environment. (Citation: Anton Cherepanov, ESET June 2017)"
        }
      ]
    },
    {
      "case_id": "S1000",
      "case_name": "ACAD/Medre.A",
      "descriptions": [
        {
          "tech_id": "T0893",
          "tech_name": "Data from Local System",
          "case_description": "[ACAD/Medre.A](https://attack.mitre.org/software/S1000) collects information related to the AutoCAD application. The worm collects AutoCAD (*.dwg) files with drawings from infected systems. (Citation: ESET)"
        }
      ]
    },
    {
      "case_id": "S1010",
      "case_name": "VPNFilter",
      "descriptions": [
        {
          "tech_id": "T0830",
          "tech_name": "Adversary-in-the-Middle",
          "case_description": "The [VPNFilter](https://attack.mitre.org/software/S1010)'s ssler module configures the device's iptables to redirect all traffic destined for port 80 to its local service listening on port 8888. Any outgoing web requests on port 80 are now intercepted by ssler and can be inspected by the ps module and manipulated before being sent to the legitimate HTTP service. (Citation: William Largent June 2018) (Citation: Carl Hurd March 2019)"
        }
      ]
    },
    {
      "case_id": "S1072",
      "case_name": "Industroyer2",
      "descriptions": [
        {
          "tech_id": "T0802",
          "tech_name": "Automated Collection",
          "case_description": "[Industroyer2](https://attack.mitre.org/software/S1072) leverages a hardcoded list of remote-station IP addresses to iteratively initiate communications and collect information across multiple priority IEC-104 priority levels.(Citation: Industroyer2 Forescout July 2022)"
        }
      ]
    }
  ],
  "example_usage": "",
  "github": null,
  "factsheet": null
}